// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { FBAttachPoint } from '../../../../../io/lionweb/serialization/flatbuffers/gen/fbattach-point.js';
import { FBNode } from '../../../../../io/lionweb/serialization/flatbuffers/gen/fbnode.js';


export class FBBulkImport {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FBBulkImport {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFBBulkImport(bb:flatbuffers.ByteBuffer, obj?:FBBulkImport):FBBulkImport {
  return (obj || new FBBulkImport()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFBBulkImport(bb:flatbuffers.ByteBuffer, obj?:FBBulkImport):FBBulkImport {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FBBulkImport()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

attachPoints(index: number, obj?:FBAttachPoint):FBAttachPoint|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new FBAttachPoint()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

attachPointsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

nodes(index: number, obj?:FBNode):FBNode|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new FBNode()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

nodesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startFBBulkImport(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addAttachPoints(builder:flatbuffers.Builder, attachPointsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, attachPointsOffset, 0);
}

static createAttachPointsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAttachPointsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addNodes(builder:flatbuffers.Builder, nodesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, nodesOffset, 0);
}

static createNodesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startNodesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endFBBulkImport(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishFBBulkImportBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedFBBulkImportBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createFBBulkImport(builder:flatbuffers.Builder, attachPointsOffset:flatbuffers.Offset, nodesOffset:flatbuffers.Offset):flatbuffers.Offset {
  FBBulkImport.startFBBulkImport(builder);
  FBBulkImport.addAttachPoints(builder, attachPointsOffset);
  FBBulkImport.addNodes(builder, nodesOffset);
  return FBBulkImport.endFBBulkImport(builder);
}
}
