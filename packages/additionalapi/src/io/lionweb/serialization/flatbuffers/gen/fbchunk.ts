// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { FBLanguage } from '../../../../../io/lionweb/serialization/flatbuffers/gen/fblanguage.js';
import { FBNode } from '../../../../../io/lionweb/serialization/flatbuffers/gen/fbnode.js';


export class FBChunk {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FBChunk {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFBChunk(bb:flatbuffers.ByteBuffer, obj?:FBChunk):FBChunk {
  return (obj || new FBChunk()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFBChunk(bb:flatbuffers.ByteBuffer, obj?:FBChunk):FBChunk {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FBChunk()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

serializationFormatVersion():string|null
serializationFormatVersion(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
serializationFormatVersion(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

languages(index: number, obj?:FBLanguage):FBLanguage|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new FBLanguage()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

languagesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

nodes(index: number, obj?:FBNode):FBNode|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new FBNode()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

nodesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startFBChunk(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addSerializationFormatVersion(builder:flatbuffers.Builder, serializationFormatVersionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, serializationFormatVersionOffset, 0);
}

static addLanguages(builder:flatbuffers.Builder, languagesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, languagesOffset, 0);
}

static createLanguagesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLanguagesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addNodes(builder:flatbuffers.Builder, nodesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, nodesOffset, 0);
}

static createNodesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startNodesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endFBChunk(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishFBChunkBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedFBChunkBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createFBChunk(builder:flatbuffers.Builder, serializationFormatVersionOffset:flatbuffers.Offset, languagesOffset:flatbuffers.Offset, nodesOffset:flatbuffers.Offset):flatbuffers.Offset {
  FBChunk.startFBChunk(builder);
  FBChunk.addSerializationFormatVersion(builder, serializationFormatVersionOffset);
  FBChunk.addLanguages(builder, languagesOffset);
  FBChunk.addNodes(builder, nodesOffset);
  return FBChunk.endFBChunk(builder);
}
}
