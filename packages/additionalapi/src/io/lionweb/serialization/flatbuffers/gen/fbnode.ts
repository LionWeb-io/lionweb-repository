// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { FBContainment } from '../../../../../io/lionweb/serialization/flatbuffers/gen/fbcontainment.js';
import { FBMetaPointer } from '../../../../../io/lionweb/serialization/flatbuffers/gen/fbmeta-pointer.js';
import { FBProperty } from '../../../../../io/lionweb/serialization/flatbuffers/gen/fbproperty.js';
import { FBReference } from '../../../../../io/lionweb/serialization/flatbuffers/gen/fbreference.js';


export class FBNode {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FBNode {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFBNode(bb:flatbuffers.ByteBuffer, obj?:FBNode):FBNode {
  return (obj || new FBNode()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFBNode(bb:flatbuffers.ByteBuffer, obj?:FBNode):FBNode {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FBNode()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

classifier(obj?:FBMetaPointer):FBMetaPointer|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new FBMetaPointer()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

properties(index: number, obj?:FBProperty):FBProperty|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new FBProperty()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

propertiesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

containments(index: number, obj?:FBContainment):FBContainment|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new FBContainment()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

containmentsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

references(index: number, obj?:FBReference):FBReference|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new FBReference()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

referencesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

annotations(index: number):string
annotations(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
annotations(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

annotationsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

parent():string|null
parent(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
parent(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startFBNode(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static addClassifier(builder:flatbuffers.Builder, classifierOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, classifierOffset, 0);
}

static addProperties(builder:flatbuffers.Builder, propertiesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, propertiesOffset, 0);
}

static createPropertiesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPropertiesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addContainments(builder:flatbuffers.Builder, containmentsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, containmentsOffset, 0);
}

static createContainmentsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startContainmentsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addReferences(builder:flatbuffers.Builder, referencesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, referencesOffset, 0);
}

static createReferencesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startReferencesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAnnotations(builder:flatbuffers.Builder, annotationsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, annotationsOffset, 0);
}

static createAnnotationsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startAnnotationsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addParent(builder:flatbuffers.Builder, parentOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, parentOffset, 0);
}

static endFBNode(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
